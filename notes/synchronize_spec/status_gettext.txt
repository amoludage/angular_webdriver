var status = element(by.binding('slowHttpStatus'));

expect(status.getText()).toEqual('not started');
expect(status.getText()).toEqual('not started');
expect(status.getText()).toEqual('not started');


In protractor, the element will be refound before getting the text.
in Ruby webdriver, the element will be referenced by id (instead of issuing a find command)
and the text will be retrieved directly.



---






11:43:37.983 INFO - Executing: [new session: Capabilities [{count=1, browserName=firefox, version=ANY}]])
11:43:37.984 INFO - Creating a new session for Capabilities [{count=1, browserName=firefox, version=ANY}]
11:43:42.013 INFO - Done: [new session: Capabilities [{count=1, browserName=firefox, version=ANY}]]
11:43:42.051 INFO - Executing: [set script timeoutt: 11000])
11:43:42.090 INFO - Done: [set script timeoutt: 11000]
11:43:42.241 INFO - Executing: [get: data:text/html,<html></html>])
11:43:42.330 INFO - Done: [get: data:text/html,<html></html>]
11:43:42.341 INFO - Executing: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://localhost:8081/index.html#/async");, []])
11:43:42.424 INFO - Done: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://localhost:8081/index.html#/async");, []]
11:43:42.464 INFO - Executing: [execute script: return window.location.href;, []])
11:43:42.562 INFO - Done: [execute script: return window.location.href;, []]
11:43:42.584 INFO - Executing: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]])
11:43:42.621 INFO - Done: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]]
11:43:42.632 INFO - Executing: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []])
11:43:42.677 INFO - Done: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []]
11:43:42.690 INFO - Executing: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]])
11:43:42.778 INFO - Done: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]]
11:43:42.840 INFO - Executing: [waitForAngular, [body]])
11:43:42.908 INFO - Done: [waitForAngular, [body]]
11:43:42.923 INFO - Executing: [findByBinding, [slowHttpStatus, false, null, body]])
11:43:43.019 INFO - Done: [findByBinding, [slowHttpStatus, false, null, body]]
11:43:43.032 INFO - Executing: [get text: 0 [org.openqa.selenium.remote.RemoteWebElement@8f818cf5 -> unknown locator]])
11:43:43.082 INFO - Done: [get text: 0 [org.openqa.selenium.remote.RemoteWebElement@8f818cf5 -> unknown locator]]
11:43:43.095 INFO - Executing: [waitForAngular, [body]])
11:43:43.144 INFO - Done: [waitForAngular, [body]]
11:43:43.164 INFO - Executing: [findByBinding, [slowHttpStatus, false, null, body]])
11:43:43.220 INFO - Done: [findByBinding, [slowHttpStatus, false, null, body]]
11:43:43.258 INFO - Executing: [get text: 0 [org.openqa.selenium.remote.RemoteWebElement@8f818cf5 -> unknown locator]])
11:43:43.356 INFO - Done: [get text: 0 [org.openqa.selenium.remote.RemoteWebElement@8f818cf5 -> unknown locator]]
11:43:43.373 INFO - Executing: [waitForAngular, [body]])
11:43:43.422 INFO - Done: [waitForAngular, [body]]
11:43:43.444 INFO - Executing: [findByBinding, [slowHttpStatus, false, null, body]])
11:43:43.497 INFO - Done: [findByBinding, [slowHttpStatus, false, null, body]]
11:43:43.511 INFO - Executing: [get text: 0 [org.openqa.selenium.remote.RemoteWebElement@8f818cf5 -> unknown locator]])
11:43:43.567 INFO - Done: [get text: 0 [org.openqa.selenium.remote.RemoteWebElement@8f818cf5 -> unknown locator]]
11:43:43.588 INFO - Executing: [delete session: 85df60d0-1d35-492b-a346-6c1b2cf8725d])
11:43:43.697 INFO - Done: [delete session: 85df60d0-1d35-492b-a346-6c1b2cf8725d]